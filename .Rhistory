install.packages("slidify")
install.packages("KernSmooth")
install.packages("KernSmooth")
install.packages("KernSmooth");
install.packages("KernSmooth")
exit
defaults write org.R-project.R force.LANG en_US.UTF-8
install.packages("KernSmooth")
install.packages("KernSmooth")
defaults write org.R-project.R force.LANG en_US.UTF-8
default write org.R-project.R force.LANG en_US.UTF-8
install.packages("KernSmooth")
library(KernSmooth)
install.packages("swirl")
library(swirl)
swirl()
LIBRARY(swirl)
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z, 555)
c(z,555,z)
z * 2 + 100
my_sqrt <- z-1
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0, 10, 100)
z * 2 + 1000
my_div
swirl()
getwd()
ls()
x <- 9
ls()
dir()
setwd("~/Desktop/dss")
?list.files
args(list.files())
setwd("~/femilawal")
setwd("~")
args(list.files())
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("myTest.R")
file.create("mytest.R")
dir()
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
filepath(dir.create("testdir2"),dir.create("testdir3"))
file.path(dir.create("testdir2"),dir.create("testdir3"))
file.path(dir.create("testdir2"),dir.create("testdir3"), recursive = TRUE)
dir.create(file.path('testdir2','testdir3'), recursive = TRUE)
file.unlink("testdir2"), recursive = TRUE
file.unlink("testdir2", recursive = TRUE)
unlink("testdir2", recursive = TRUE)
setwd("old.dir")
setwd(old.dir)
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0, 10, by = 0.5)
seq(5, 10, length = 30)
my_seq <- seq(5, 10, length = 30)
length("my_seq")
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vext >= 6
num_vect >= 6
my_char <-
"My", "name", "is"
my_char <-
"My" "name" "is"
my_char <- "My" "name" "is"
my_char <- "My", "name", "is"
my_char <- "My", "name", "is".
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, "your_name_here")
c(my_char, "Olufemo")
c(my_char, "Olufemi")
my_name <- c(my_char, "Olufemi")
my_name
paste(my_name, " ")
paste(my_name, collapse = " ")
paste("Hello", "World", sep = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
C(44, NA, 5 , NA)
c(44, NA, 5 , NA)
x <- c(44, NA, 5 , NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(is_na)
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identifcal(vect, vect2)
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
vect2[2]
vect2[3]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
matrix(1:20, 4, 5)
matrix(data= 1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(data= 1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_m
atrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight","bp", "rating", "test")
colnames(my_data, cnames)
colnames(my_data)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8
| || 6 != 8 && 4 > 3.9
5 > 8 || 6 != 8 && 4 >3.9
isTRUE(6 > 4)
identical('twins', 'twins')
5 == 5.0
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function')
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(std, c(1.4, 3.6, 7.9, 8.8))
evaluate(std, c(1.4, 3.6, 7.9, 8.8))
evaluate(sdev, c(1.4, 3.6, 7.9, 8.8))
evaluate(dev, c(1.4, 3.6, 7.9, 8.8))
evaluate(deviation, c(1.4, 3.6, 7.9, 8.8))
evaluate(median, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("what up homie")
submit()
submit()
submit()
mad_libs("Tianjin", "beautiful", "car")
submit()
'I' %p% 'love' %p% 'R!'
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <-flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- unique(flags)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique(flags), length)
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plant)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LET)
sample(LETTERS)
sample(c(0,1), 100, prob = c(0.3, 0.7))
sample(c(0,1), 100, prob = c(0.3, 0.7), replace = TR)
sample(c(0,1), 100, prob = c(0.3, 0.7), replace = TRUE)
flips <- sample(c(0,1), 100, prob = c(0.3, 0.7), replace = TRUE)
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
rpois(5, 10)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1960-01-01")
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17,1986 08:24"
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
?strptime
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
hist(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(x = Speed, y = cars$dist)
plot(x = "Speed", y = cars$dist)
plot(y = cars$speed, x = "Speed")
plot(x = cars$speed, y = cars$dist, "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2
)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
data.read()
cwd
cwd()
wd
wd()
dir()
read.csv(/Downloads/hw1_data.csv)
read.csv("/Downloads/hw1_data.csv")
read.csv("./Downloads/hw1_data.csv")
x <- read.csv("./Downloads/hw1_data.csv")
table(x)
d
0
exit()
;
`
?matric
ex
?matrix
clear
add2 <- function(x,y){
x+y
}
add2(3,5)
above <- function(x, n) {
use <- x > n
x[use]
}
x <- 1:20
above(x, 2)
above(x)
above(x,)
above <- function(x, n = 10) {
use <- x > n
x[use]
}
above(x)
col_mean <- function(x){
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(x[i])
}
means
}
col_mean(airquality)
airquality
col_mean(airquality)
col_mean <- function(x){
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(x[, i])
}
means
}
col_mean(airquality)
col_mean <- function(x, removeNA = T){
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(x[, i])
}
means
}
col_mean(airquality)
col_mean <- function(x, removeNA = TRUE){
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(x[, i])
}
means
}
col_mean(airquality)
col_mean <- function(x, removeNA = TRUE){
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(x[, i])
}
means
}
col_mean(airquality)
col_mean(airquality, TRUE)
col_mean <- function(x){
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc){
h <- x[, i]
means[i] <- mean(h[!is.na(h)])
}
means
}
col_mean(airquality, TRUE)
col_mean(airquality)
setwd("~/Desktop/dss/rprog-data-ProgAssignment3-data")
source("rankall.R")
rankall("pneumonia")
System.time(rankall("pneumonia"))
system.time(rankall("pneumonia"))
system.time(readLines("http://www.jhsph.edu"))
hilbert <- function(n) {    i <- 1:n    1 / outer(i - 1, i, "+”)}x <- hilbert(1000)system.time(svd(x))
hilbert <- function(n) {    i <- 1:n    1 / outer(i - 1, i, "+”)}
hilbert <- function(n) {    i <- 1:n    1 / outer(i - 1, i, "+”)}
sample.interval = 1000
sample.interval == 1000
getwd()
setwd("~/Desktop/dss")
if(!file.exists("data")){ dir.create("data")}
